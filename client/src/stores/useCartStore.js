import { create } from "zustand";
import axios from "../lib/axios";
import toast from "react-hot-toast";

const useCartStore = create((set, get) => ({
    cart: [], // Danh s√°ch s·∫£n ph·∫©m trong gi·ªè h√†ng
    loading: false,
    error: null,
    clearCart: () => set({ cart: [] }), // Reset gi·ªè h√†ng v·ªÅ tr·ªëng



    // üîÑ L·∫•y gi·ªè h√†ng t·ª´ server
    getCart: async () => {
        try {
            set({ loading: true });
            const response = await axios.get("/cart");
            set({ cart: response.data.items, loading: false });
        } catch (error) {
            set({ error: error.response?.data?.message || "L·ªói khi l·∫•y gi·ªè h√†ng", loading: false });
        }
    },

    // ‚ûï Th√™m s·∫£n ph·∫©m v√†o gi·ªè
    addToCart: async (productId, image, name, color, capacity, price, quantity) => {
        try {
            set({ loading: true });
            const response = await axios.post("/cart/add", { productId, image, name, color, capacity, price, quantity });
            set({ cart: response.data.items, loading: false });
        } catch (error) {
            set({ error: error.response?.data?.message || "L·ªói khi th√™m s·∫£n ph·∫©m", loading: false });
        }
    },


    // üîÑ C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m trong gi·ªè
    updateCartItem: async (productId, capacity, color, quantity) => {
        try {
            set({ loading: true });
            const response = await axios.put("/cart/update", { productId, capacity, color, quantity });
            // s·∫£n ph·∫©m khi quuantity = 0 th√¨ x√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng
            if (quantity <= 0) {
                // üî• N·∫øu s·ªë l∆∞·ª£ng b·∫±ng 0, g·ªçi `removeCartItem` v√† d·ª´ng lu√¥n
                await get().removeCartItem(productId, capacity, color);
                set({ loading: false });
                return;
            }
            // C·∫≠p nh·∫≠t l·∫°i gi·ªè h√†ng sau khi c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng


            set((state) => ({
                cart: state.cart.map((item) =>
                    item.productId === productId && item.capacity === capacity && item.color === color
                        ? { ...item, quantity }  // Ch·ªâ c·∫≠p nh·∫≠t ƒë√∫ng s·∫£n ph·∫©m
                        : item
                ),
                loading: false,
            }));
        } catch (error) {
            set({ error: error.response?.data?.message || "L·ªói khi c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng", loading: false });
        }
    },




    // üóëÔ∏è X√≥a m·ªôt s·∫£n ph·∫©m kh·ªèi gi·ªè
    removeCartItem: async (productId, capacity, color) => {
        try {
            set({ loading: true });

            // G·ª≠i request v·ªõi params & query string
            await axios.delete(`/cart/${productId}`, {
                params: { capacity, color }
            });
            toast.success("X√≥a s·∫£n ph·∫©m th√†nh c√¥ng");

            // C·∫≠p nh·∫≠t gi·ªè h√†ng sau khi x√≥a th√†nh c√¥ng
            set((state) => ({
                cart: state.cart.filter(
                    (item) => !(item.productId === productId && item.capacity === capacity && item.color === color)
                ),
                loading: false,
            }));
        } catch (error) {
            set({ error: error.response?.data?.message || "L·ªói khi x√≥a s·∫£n ph·∫©m", loading: false });
        }
    },




}));

export default useCartStore;
